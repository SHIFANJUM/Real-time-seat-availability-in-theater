# classes or the background program
class Seat_Availability:
    def __init__(self, seat_counts):
        self.seat_counts = seat_counts
        self.available_seats = sum(seat_counts)
        self.reserved_seats = set()

    def update_seat_counts(self, new_seat_counts):
        self.seat_counts = new_seat_counts
        self.available_seats = sum(new_seat_counts)

    def check_seat_availability(self):
        return self.available_seats

    def manage_seat_reservations(self, reservation_data):
        show_time = reservation_data.get("show_time", "Morning Show")
        row_type = reservation_data.get("row_type", "Front")
        movie_name = reservation_data.get("movie_name", "Unknown")
        customer_name = reservation_data["customer_name"]
        seats_requested = reservation_data["seats_requested"]

        if movie_name not in self.movies:
            print("Movie not found. Please choose from available movies.")
            return

        ticket_price = 0
        if row_type.lower() == "front":
            ticket_price = 50
        elif row_type.lower() == "middle":
            ticket_price = 100
        elif row_type.lower() == "upper":
            ticket_price = 150
        else:
            print("Invalid row type. Please try again.")
            return

        total_cost = ticket_price * seats_requested

        if total_cost == 0:
            print("Invalid number of seats requested.")
            return

        if self.available_seats < seats_requested:
            print("Not enough seats available.")
            return

        print(f"Booking details for {show_time}, {row_type} Row:")
        print(f"Movie Name: {movie_name}")
        print(f"Customer Name: {customer_name}")
        print(f"Number of Seats: {seats_requested}")
        print(f"Total Cost: {total_cost}")

        reserved_seat_numbers = []
        for i, row_count in enumerate(self.seat_counts, 1):
            if row_type.lower() in ["front", "middle", "upper"]:
                if row_type.lower() == "front" and i != 1:
                    continue
                if row_type.lower() == "middle" and i != 2:
                    continue
                if row_type.lower() == "upper" and i != 3:
                    continue

            seat_numbers = []
            for j in range(row_count):
                seat_number = sum(self.seat_counts[:i - 1]) + j + 1
                if seat_number not in self.reserved_seats:
                    self.reserved_seats.add(seat_number)
                    self.available_seats -= 1
                    seat_numbers.append(seat_number)
                    reserved_seat_numbers.append(seat_number)
                    if len(seat_numbers) == seats_requested:
                        print(f"Reserved seats {seat_numbers} for {customer_name}")
                        break
            else:
                print(f"Not enough seats available for {customer_name}")
        return reserved_seat_numbers

    def cancel_reservation(self, reservation_data):
        customer_name = reservation_data["customer_name"]
        seats_to_cancel = reservation_data["seats_to_cancel"]

        canceled_seats = []
        for seat_number in seats_to_cancel:
            if seat_number in self.reserved_seats:
                self.reserved_seats.remove(seat_number)
                self.available_seats += 1
                canceled_seats.append(seat_number)
        return canceled_seats


class RealTimeSeat_Availability(Seat_Availability):
    def __init__(self, seat_counts, movies):
        super().__init__(seat_counts)
        self.movies = movies


class SeatReservationSystem:
    def __init__(self, seat_counts, movies):
        self.movies = movies
        self.availability_system = RealTimeSeat_Availability(seat_counts, movies)

    def check_seat_availability(self):
        return self.availability_system.check_seat_availability()

    def make_reservation(self, reservation_data):
        return self.availability_system.manage_seat_reservations(reservation_data)

    def cancel_reservation(self, reservation_data):
        return self.availability_system.cancel_reservation(reservation_data)


# main program or user interface
from Seat_Availability import SeatReservationSystem
if __name__ == "__main__":
    seat_counts = [20, 30, 50]  # Seat counts for each row [Front, Middle, Upper]
    movies = ["family star", "tillu2", "kgf2"]
    reservation_system = SeatReservationSystem(seat_counts, movies)
    print("Welcome to Seat Reservation System")
    while True:
        print("\nSelect Show Time:")
        print("1. Morning Show")
        print("2. Afternoon Show")
        print("3. Night Show")
        print("4. Exit")
        show_choice = input("Enter your choice: ")

        if show_choice == "4":
            print("Thank you for using Seat Reservation System. Goodbye!")
            break

        if show_choice == "1":
            show_time = "Morning Show"
        elif show_choice == "2":
            show_time = "Afternoon Show"
        elif show_choice == "3":
            show_time = "Night Show"
        else:
            print("Invalid show time choice. Please try again.")
            continue

        print("Available Movies:")
        for i, movie in enumerate(movies, 1):
            print(f"{i}. {movie}")

        movie_choice = input("Enter movie choice (1-3): ")
        if movie_choice not in ["1", "2", "3"]:
            print("Invalid movie choice. Please try again.")
            continue

        movie_name = movies[int(movie_choice) - 1]
        current_seat_availability = reservation_system.check_seat_availability()
        print(f"Current Seat Availability: {current_seat_availability}")

        row_type = input("Select Row Type (Front, Middle, Upper): ")
        if row_type.lower() not in ["front", "middle", "upper"]:
            print("Invalid row type. Please try again.")
            continue

        customer_name = input("Enter your name: ")
        seats_requested = int(input("Enter number of seats to book: "))

        reservation_data = {
            "show_time": show_time,
            "row_type": row_type,
            "movie_name": movie_name,
            "customer_name": customer_name,
            "seats_requested": seats_requested
        }
        reserved_seats = reservation_system.make_reservation(reservation_data)

        cancel_choice = input("Do you want to cancel any seats? (yes/no): ")
        if cancel_choice.lower() == "yes":
            seats_to_cancel = list(map(int, input("Enter seat numbers to cancel (comma-separated): ").split(',')))
            cancel_data = {
                "customer_name": customer_name,
                "seats_to_cancel": seats_to_cancel
            }
            canceled_seats = reservation_system.cancel_reservation(cancel_data)
            print(f"Canceled seats: {canceled_seats}")
